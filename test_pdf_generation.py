#!/usr/bin/env python3
"""
PDF Generation Test Script
Tests the fixed "Generate Test PDF" functionality
"""

import requests
import sys
import json
from datetime import datetime

class PDFGenerationTester:
    def __init__(self, base_url="https://ineed-fix.preview.emergentagent.com"):
        self.base_url = base_url
        self.tests_run = 0
        self.tests_passed = 0
        self.session = requests.Session()

    def run_test(self, name, method, endpoint, expected_status, data=None, headers=None):
        """Run a single API test"""
        url = f"{self.base_url}/{endpoint}"
        default_headers = {'Content-Type': 'application/json'}
        
        if headers:
            default_headers.update(headers)

        self.tests_run += 1
        print(f"\nüîç Testing {name}...")
        print(f"   URL: {url}")
        
        try:
            if method == 'GET':
                response = self.session.get(url, headers=default_headers, timeout=15)
            elif method == 'POST':
                response = self.session.post(url, json=data, headers=default_headers, timeout=30)
            elif method == 'PUT':
                response = self.session.put(url, json=data, headers=default_headers, timeout=15)
            elif method == 'DELETE':
                response = self.session.delete(url, json=data, headers=default_headers, timeout=15)

            success = response.status_code == expected_status
            if success:
                self.tests_passed += 1
                print(f"‚úÖ Passed - Status: {response.status_code}")
                try:
                    if response.headers.get('content-type', '').startswith('application/json'):
                        response_data = response.json()
                        print(f"   Response: {json.dumps(response_data, indent=2)[:300]}...")
                    else:
                        print(f"   Response: {response.headers.get('content-type', 'unknown')} ({len(response.content)} bytes)")
                except:
                    print(f"   Response: {response.text[:300]}...")
            else:
                print(f"‚ùå Failed - Expected {expected_status}, got {response.status_code}")
                print(f"   Response: {response.text[:300]}...")

            return success, response

        except requests.exceptions.Timeout:
            print(f"‚ùå Failed - Request timeout")
            return False, None
        except requests.exceptions.ConnectionError:
            print(f"‚ùå Failed - Connection error")
            return False, None
        except Exception as e:
            print(f"‚ùå Failed - Error: {str(e)}")
            return False, None

    def test_authentication_required(self):
        """Test that PDF generation requires authentication"""
        print("\nüîê TESTING PDF GENERATION AUTHENTICATION REQUIREMENT...")
        
        success, response = self.run_test(
            "PDF Generation - No Auth (Should Fail)",
            "POST",
            "api/brand/test-pdf",
            401
        )
        
        if success:
            print("   ‚úÖ PDF generation properly requires authentication")
            return True
        else:
            print("   ‚ùå PDF generation should require authentication")
            return False

    def test_login(self):
        """Test login with demo credentials"""
        print("\nüîë TESTING LOGIN...")
        
        login_data = {
            "email": "demo@demo.com",
            "password": "Goosey23!!23",
            "remember_me": False
        }
        
        success, response = self.run_test(
            "Admin Login",
            "POST",
            "api/auth/login",
            200,
            data=login_data
        )
        
        if success and response:
            print("   ‚úÖ Login successful")
            return True
        else:
            print("   ‚ùå Login failed")
            return False

    def test_pdf_generation(self):
        """Test PDF generation with authenticated user"""
        print("\nüìÑ TESTING PDF GENERATION...")
        
        success, response = self.run_test(
            "PDF Generation - Authenticated",
            "POST",
            "api/brand/test-pdf",
            200
        )
        
        if success and response:
            # Check Content-Type header
            content_type = response.headers.get('Content-Type', '')
            if content_type == 'application/pdf':
                print("   ‚úÖ Correct Content-Type: application/pdf")
            else:
                print(f"   ‚ùå Incorrect Content-Type: {content_type}")
                return False
            
            # Check Content-Disposition header
            content_disposition = response.headers.get('Content-Disposition', '')
            if 'attachment' in content_disposition and 'filename=' in content_disposition:
                print(f"   ‚úÖ Correct Content-Disposition: {content_disposition}")
            else:
                print(f"   ‚ùå Missing or incorrect Content-Disposition: {content_disposition}")
            
            # Check PDF content size
            pdf_size = len(response.content)
            if pdf_size > 1000:  # PDF should be at least 1KB
                print(f"   ‚úÖ PDF content size: {pdf_size} bytes (valid)")
            else:
                print(f"   ‚ùå PDF content too small: {pdf_size} bytes")
                return False
            
            # Check PDF header
            pdf_content = response.content
            if pdf_content.startswith(b'%PDF'):
                print("   ‚úÖ Valid PDF header (%PDF)")
            else:
                print("   ‚ùå Invalid PDF header")
                return False
            
            print("   ‚úÖ PDF generation successful with all validations passed")
            return True
        else:
            print("   ‚ùå PDF generation failed")
            return False

    def test_backend_logs(self):
        """Check backend logs for any errors"""
        print("\nüìã CHECKING BACKEND LOGS...")
        
        try:
            import subprocess
            result = subprocess.run(
                ["tail", "-n", "50", "/var/log/supervisor/backend.err.log"],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0:
                log_content = result.stdout
                if log_content.strip():
                    print("   üìã Recent backend error logs:")
                    print(f"   {log_content[-500:]}")  # Last 500 chars
                else:
                    print("   ‚úÖ No recent errors in backend logs")
                return True
            else:
                print("   ‚ö†Ô∏è  Could not read backend logs")
                return True  # Don't fail the test for this
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Error checking logs: {e}")
            return True  # Don't fail the test for this

    def run_comprehensive_test(self):
        """Run all PDF generation tests"""
        print("üéØ PDF GENERATION ENDPOINT TESTING")
        print("="*80)
        print("Testing the fixed 'Generate Test PDF' functionality")
        print("Focus areas:")
        print("1. Authentication: Test POST /api/brand/test-pdf requires proper authentication")
        print("2. PDF Generation: Verify endpoint returns PDF file with correct headers")
        print("3. Content Validation: Ensure PDF contains sample branding data")
        print("4. Response Format: Verify proper Content-Type and Content-Disposition headers")
        print("5. WeasyPrint Integration: Confirm WeasyPrint is working correctly")
        print("="*80)
        
        # Test 1: Authentication requirement
        auth_test = self.test_authentication_required()
        
        # Test 2: Login
        login_test = self.test_login()
        
        # Test 3: PDF generation (only if login successful)
        pdf_test = False
        if login_test:
            pdf_test = self.test_pdf_generation()
        
        # Test 4: Check backend logs
        log_test = self.test_backend_logs()
        
        # Calculate results
        success_rate = (self.tests_passed / self.tests_run) * 100 if self.tests_run > 0 else 0
        
        print(f"\nüìä PDF GENERATION TEST RESULTS")
        print("="*80)
        print(f"‚úÖ Tests Passed: {self.tests_passed}")
        print(f"‚ùå Tests Failed: {self.tests_run - self.tests_passed}")
        print(f"üìà Success Rate: {success_rate:.1f}%")
        
        # Detailed results
        print(f"\nüìã DETAILED RESULTS:")
        print(f"   Authentication Required: {'‚úÖ PASS' if auth_test else '‚ùå FAIL'}")
        print(f"   Login Functionality: {'‚úÖ PASS' if login_test else '‚ùå FAIL'}")
        print(f"   PDF Generation: {'‚úÖ PASS' if pdf_test else '‚ùå FAIL'}")
        print(f"   Backend Logs: {'‚úÖ CHECKED' if log_test else '‚ö†Ô∏è  UNAVAILABLE'}")
        
        # Overall assessment
        critical_tests = [auth_test, login_test, pdf_test]
        critical_passed = sum(critical_tests)
        
        if critical_passed == 3:
            print("\nüéâ PDF GENERATION: EXCELLENT - All functionality working correctly")
            print("‚úÖ WeasyPrint integration successful")
            print("‚úÖ Authentication properly enforced")
            print("‚úÖ PDF generation working correctly")
            print("‚úÖ Response headers properly configured")
            print("‚úÖ No more 500 Internal Server Error")
            return True
        elif critical_passed >= 2:
            print("\n‚úÖ PDF GENERATION: GOOD - Minor issues may exist")
            print("‚ö†Ô∏è  Some features may need attention")
            print("‚úÖ Core PDF functionality working")
            return True
        else:
            print("\n‚ùå PDF GENERATION: NEEDS ATTENTION")
            print("‚ùå Significant issues found")
            print("‚ùå Review WeasyPrint installation and configuration")
            return False

def main():
    """Main function"""
    tester = PDFGenerationTester()
    success = tester.run_comprehensive_test()
    
    if success:
        print("\nüéâ Overall Status: SUCCESS - PDF generation is working!")
        sys.exit(0)
    else:
        print("\n‚ùå Overall Status: FAILURE - PDF generation needs attention")
        sys.exit(1)

if __name__ == "__main__":
    main()